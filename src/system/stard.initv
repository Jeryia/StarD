#!%BASH%


# stard
# chkconfig: 345 90 20
# description: starmade deamon
# processname: stard

source "%SYSCONFDIR%/stard"
EXEC=%SBINDIR%/stard
EXEC_NAME=stard

NAME=stard
PIDFILE=/var/run/$NAME.pid

if [ "x" == "x$TERMTIME" ]; then
        TERMTIME=$SHUTDOWN_TIME
fi

if [ "x" == "x$KILLTIME" ]; then
        KILLTIME=`expr $SHUTDOWN_TIME \* 2`
fi

if [ $UID -ne 0 ]; then
	echo "Your must be root to run this command."
	exit 1
fi



# If things are still running start using a bigger hammer
## kill_procs
# tries increasingly harder hammers until the process dies.
# INPUT1: process name match
# INPUT2: owner of process
# INPUT3-*: any arguments to give to pgrep/pkill
function kill_procs {
	proc=$1
	shift
	user=$1
	shift
	args=$@

	running=`pgrep $args $proc -U $USER | wc -l`
	timer=0
	while [ $running -gt 0 ]; do
		timer=`expr $timer + 1`
		if [ $timer -eq $TERMTIME ]; then
			echo
			echo "Normal Shutdown of $proc failed:"
			pgrep $args $proc -U $user
			echo "Sending SIGTERM..."
			pkill -U $user $args $proc
		fi
		
		if [ $timer -gt $KILLTIME ]; then
			echo "SIGTERM failed sending SIGKILL"
			pkill -9 -U $user $args $proc
		fi
		sleep 1
		running=`pgrep -U $user $args $proc | wc -l`
	done
}

function status {
	echo -n "Checking $NAME..."
	if [ -f $PIDFILE ]; then
		pgrep -U root -x $EXEC_NAME --pidfile $PIDFILE > /dev/null 2>&1
		RET=$?
		if [ $RET -eq 0 ]; then
			echo "Running"
			return 0
		else
		echo
			echo "Process dead but pidfile exists"
			return 1
		fi
	else
		echo
		echo "$NAME not running"
		return 1
	fi
	return 0
}


function start {
	echo -n "Starting $NAME..."
	nohup $EXEC > /dev/null 2>&1 &
	PID=$!
	if [ -z $PID ]; then
		printf "%s\n" "Fail"
		return 1
	else
		echo $PID > $PIDFILE
		printf "%s\n" "Ok"
		return 0
	fi
	
}
function stop {
        echo -n "Stopping $NAME..."
	if [ -f $PIDFILE ]; then
		PID=`cat $PIDFILE`
            	pkill -U root -x $EXEC_NAME --pidfile $PIDFILE > /dev/null 2>&1

		# issue the starmade shutdown command
		pgrep -x java -U $USER > /dev/null 2>&1
		RET=$?
		if [ $RET -eq 0 ]; then
			su $USER -c "%STARMADEDIR%/stard/bin/stard_cmd \"/shutdown $SHUTDOWN_TIME\"" > /dev/null 2>&1
			# wait a minute for starmade to clean up
			sleep $SHUTDOWN_TIME
			sleep 10
		fi


		kill_procs java $USER -x
		kill_procs stard-multiplexer $USER
		kill_procs stard-launcher $USER

		pgrep -U root -x $EXEC_NAME --pidfile $PIDFILE > /dev/null 2>&1
		RET=$?
		if [ $RET -ne 0 ]; then
			echo "OK"
			rm $PIDFILE
			return 0
		else 
			echo "FAIL"
			return 1
		fi
	fi
	echo
}

function update-sm {
	echo "Performing update on StarMade"
	cd "$baseDir"
	su $USER -c "./stard/bin/download_starmade --update" || return 1
}

function backup {
	echo "Performing backup of stard (including StarMade)"
	cd "$baseDir"
	rsync -arv --delete "$baseDir"/* "$baseDir.bak"
}

function restore {
	echo "Are you sure you want to restore (The current server will be deleted and replaced with the latest backup):"
	echo -n "Please Type Yes or No:"
	read ANS

	if [ "$ANS" == "Yes" ]; then
		echo "Performing restore of stard (including StarMade)"
		cd "$baseDir"
		rsync -arv --delete "$baseDir.bak"/* "$baseDir"
	else 
		echo "Restore aborted!"
	fi
}

case "$1" in
start)
	start
	RET=$?
	exit $RET
;;
status)
	status
	RET=$?
	exit $RET
;;
stop)
	stop
	RET=$?
	exit $RET
;;

restart)
  	stop && start
	RET=$?
	exit $RET
;;

update-sm)
  	stop && update-sm
	RET=$?
	start
	exit $RET
;;

backup)
  	stop && backup
	RET=$?
	start
	exit $RET
;;

restore)
  	stop && restore
	RET=$?
	start
	exit $RET
;;


*)
        echo "Usage: $0 {status|start|stop|restart|update-sm|backup|restore}"
        exit 1
esac
