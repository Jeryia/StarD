#!%PERL%
use strict;
use warnings;
use Cwd;

use lib("./lib/perl");
use Starmade::Base;
use Stard::Base;
use Stard::Multiplexer;
use Stard::Plugin;
use Stard::Log;

# Name: stard-multiplexer
# Description: This is the primary parsing daemon for starmade. This 
# reads in output from Starmade, and determines what to do with it.



# disabled buffering. Needed because for some reason. Writing the log doesn't 
# work well without this.
$| =1;

# determine where the stard home is
# using our called path.
my $stard_home= getcwd();
my $prog = $0;


#load stard libraries
stard_setup_lib_env($stard_home);
starmade_setup_lib_env($stard_home);
$ENV{PERLLIB}='../../lib/perl';
$ENV{PYTHONPATH}='../../lib/python';
$ENV{BASHLIB}='../../lib/bash';


main();

exit 0;
#################################################





## main
# Real work starts here!
sub main {
	## setup environment
	my $starmade_home = "$stard_home/..";
	my $spool = "$starmade_home/spool";

	# read starmade output
	my $serverOutFile = "$spool/serverErr";
	my $serverOUT_fh;


	if (get_stard_conf_field('loglevel')) {
		set_loglevel(get_stard_conf_field('loglevel'));
	}
	else {
		set_loglevel(6);
	}

	# Check if plugins look ok
	validate_plugins();

	## start parsing output
	if (!open($serverOUT_fh, "<", $serverOutFile)) {
		stdout_log("failed to open '$serverOutFile': $!", 0);
		exit 1;
	}

	# Main loop for analysing starmade output
	stdout_log("$prog has started successfully!", 5);
	while( <$serverOUT_fh> ) {
		my $message = $_;


		
		if ($message =~/^\[SERVER\]/) {
			# temp fix in the starmade output, some entries spell server wrong :P	
			$message=~s/^\[SREVER\]/\[SERVER\]/ig;

			server_messages($message);
		}
		elsif ($message =~/^\[AI\]/) {
			ai_messages($message);
		}
		elsif ($message =~/^\[CHANNELROUTER\]/) {
			chat_messages($message);
		};

	};
	close($serverOUT_fh);
};
