#!%BASH%



# Name: stard-launcher
# Description: The primary launcher for stard. 
# This launches all of the stard daemons (using 
# stard_daemons), and starts the starmade server 
# itself.

## Setup Enrivonment
DIR=`dirname $0`
cd $DIR/../..

STANDALONE=%STANDALONE%
if [ $STANDALONE -eq 0 ]; then
	source %SYSCONFDIR%/stard
else
	source "stard/stard-launcher.conf"
	baseDir=`pwd`
	SERVER_DIR="$baseDir/StarMade"
fi

CWD=`pwd`
if [ 'x' == "x$SERVER_DIR" ]; then
	echo "SERVER_DIR undefined. exiting"
	exit 1
fi

if [ 'x' == "x$baseDir" ]; then
	echo "baseDir undefined. exiting"
	exit 1
fi

if [ 'x' == "x$EXEC" ]; then
	echo "EXEC undefined. exiting"
	exit 1
fi

if [ ! -r "$baseDir/tools/StarMade-Starter.jar" ]; then
	echo "StarMade-Starter.jar is missing..."
	echo "Please download this from http://www.starmade.org/download and put it in $baseDir/tools/"
	exit 1
fi

if [ ! -r "$baseDir/tools/StarNet.jar" ]; then
	cd "$baseDir/tools/"
	echo "$baseDir/tools/StarNet.jar not found... Pulling from star-made.org"
	wget http://files.star-made.org/StarNet.jar || exit 1
	cd "$CWD"
fi


stard_home="$baseDir/stard"
spool="$baseDir/spool"
plugin_dir="$stard_home/plugins"
bin="$stard_home/bin"
stard_log="$stard_home/log"
output="$spool/serverOut"
error="$spool/serverErr"
input="$spool/serverIn"
PLUGINS=`$stard_home/bin/stard_get_plugin_list`


## Have starmade 'set itself up' if needbe
if [ ! -e "$SERVER_DIR/version.txt" ]; then
	cd "$baseDir"
	stard/bin/download_starmade
	cd $CWD
fi

function on_die() {
	$bin/stard_daemons stop
	trap "exit 0" SIGINT
	trap "exit 0" SIGTERM
	kill 0
	exit 0
}


# change perms of this so only root and the stard user can read this.
# Since this contains the keys to the server.
chmod 600 $SERVER_DIR/server.cfg

## if server isn't setup with keys, set it up
grep -q "SUPER_ADMIN_PASSWORD_USE = true" $SERVER_DIR/server.cfg > /dev/null 2>&1
RET=$?
if [ $RET -ne 0 ]; then
	cd "$SERVER_DIR"
	$EXEC > /dev/null 2>&1 &
	PID=$!
	while [ ! -e "$SERVER_DIR/server.cfg" ]; do
		sleep 1
	done
	kill $PID
	cd "$CWD"
	$stard_home/bin/stard_gen_passwd
fi



###################################
#   Setup and start StarD 
###################################

# If there is a stard-launcher running. Kill it as it will interfere with the 
# current one.
pkill -9 --pidfile ./stard-launcher.pid > /dev/null 2>&1
echo $$ > ./stard-launcher.pid


## setup output files for the starmade server
mkdir $spool > /dev/null 2>&1
#mkfifo $output
mkfifo $error > /dev/null 2>&1
mkfifo $input > /dev/null 2>&1


$bin/rotate_logs
# make sure plugins are setup correctly
$bin/fix_plugins

# stop any already running starmade daemon
running_starmades=`lsof $SERVER_DIR 2>&1 | grep java | wc -l`
if [ $running_starmades -gt 0 ]; then
	echo "Starmade is already running. Trying to kill it..."
	kill `lsof $SERVER_DIR 2>&1 | grep java | awk '{print $2}'` 2>&1 > /dev/null
	sleep 30;
	running_starmades=`lsof $SERVER_DIR 2>&1 | grep java | wc -l`
fi


if [ $running_starmades -gt 0 ]; then
	echo "Starmade is still running... Trying a bigger hammer..."
	kill -9 `lsof $SERVER_DIR 2>&1 | grep java | awk '{print $2}'` 2>&1 > /dev/null
	sleep 2;
fi
                                                         

# make sure we have a clean state before we start launching things
$bin/stard_daemons prerun
$bin/stard_daemons stop

# clear any old messages out of the pipe
timeout 1 cat $error &
echo '' > $error
timeout 1 cat $input &
echo '' > $input
sleep 1

trap "on_die" SIGINT
trap "on_die" SIGTERM


## Actual program launch
# Start all deamons
$bin/stard_daemons start

# Launch the starmade daemon.
# haven't seen a use for stdout so we just throw it away.
cd $SERVER_DIR
echo "Starting Starmade"

if [ $STANDALONE -ne 0 ]; then
	echo "StarD is now started with StarMade!"
	echo "It may take a few moments for you to be able to log"
	echo "onto the server, as StarMade collects itself"
	echo
	echo "To stop stard just hit ctrl-c"
	echo "To start stard again type starmade/stard/bin/stard-launcher"
fi
# temporary fix for starmade bug (T69)
tail -f /dev/null > $input &
$EXEC > /dev/null 2> $error < $input
cd $CWD

$bin/stard_daemons stop

# Send a sigterm to all launched processes before exiting.
kill 0

exit 0
