#!perl
package marauders_lib;
use strict;
use warnings;

use lib("../../lib/perl");
use Starmade::Base;
use Starmade::Sector;
use Starmade::Player;
use Starmade::Regression;
use Stard::Base;

use lib ("./lib");
use marauders_lib;

my $stard_home = "./../..";

starmade_setup_lib_env($stard_home);
starmade_stdlib_set_debug(1);
my $CONFIG = "./marauders.conf";

main(@ARGV);
exit 0;
sub main {
	my $player = shift(@_);

	my $plugin = "Marauders";
	my $cur_threat;
	my $new_threat;
	my $add_threat;
	my %player_info;
	my %sector_info;
	my $ship_id;
	my $ship_id2;
	my $pos;
	my $pos2;
	my $ship_type;
	my %config = %{stard_read_config($CONFIG)};

	prep_test_category("Plugin: $plugin", 28, 1);

	# clean up any current objects
	foreach my $object (@{list_ship_objects($player)}) {
		remove_ship_object($player, $object);
	}

	# move the player so that they won't bein the spawn safety area
	starmade_change_sector_for($player, '100 100 100');

	## Threat Tests
	add_threat_level($player, -100);
	$add_threat = 2;
	$cur_threat = get_threat_level($player);
	add_threat_level($player, $add_threat);
	$new_threat = get_threat_level($player);
	test_result("plugin-$plugin - add_threat", $cur_threat + $add_threat == $new_threat);

	$add_threat = -10000;
	$cur_threat = get_threat_level($player);
	add_threat_level($player, $add_threat);
	$new_threat = get_threat_level($player);
	test_result("plugin-$plugin - check threat won't go below 0", $new_threat == 0);
	
	$cur_threat = get_threat_level($player);
	player_victory($player);
	$new_threat = get_threat_level($player);
	test_result("plugin-$plugin - player_victory", $cur_threat + $config{General}{victory_threat} == $new_threat);
	sleep 61;
	test_result("plugin-$plugin - last_victory", last_victory($player) == 1);
	test_result("plugin-$plugin - last_engagement 1", last_engagement($player) == 1);

	add_threat_level($player, -10000);	
	add_threat_level($player, 10);
	$cur_threat = get_threat_level($player);
	player_defeat($player);
	$new_threat = get_threat_level($player);
	test_result("plugin-$plugin - player_defeat", $cur_threat + $config{General}{defeat_threat} == $new_threat);
	sleep 61;
	test_result("plugin-$plugin - last_defeat", last_defeat($player) == 1);
	test_result("plugin-$plugin - last_engagement 2", last_engagement($player) == 1);


	## id validation
	$ship_id = _gen_id();
	test_result("plugin-$plugin - _gen_id valid", $ship_id=~/^[a-zA-Z0-9]{8}$/);

	# not a great test, but chances of them genating the same ids is VERY low.
	$ship_id2 = _gen_id();
	test_result("plugin-$plugin - _gen_id is rand", $ship_id ne $ship_id2);

	$ship_id = _gen_obj_id;
	test_result("plugin-$plugin - _gen_obj_id valid", $ship_id=~/^[a-zA-Z0-9]{8}$/);

	$pos = _random_pos();
	test_result("plugin-$plugin - _random_pos valid", $pos=~/^-?\d+\.?\d* -?\d+\.?\d* -?\d+\.?\d*$/);
	
	# not a great test, but chances of them genating the same number sets is VERY low.
	$pos2 = _random_pos();
	test_result("plugin-$plugin - _random_pos is rand", $pos ne $pos2);
	

	## Object tests
	for my $ship (@{list_ship_objects($player)}) {
		remove_ship_object($player, $ship);
	}

	$ship_type = "Marusian Skimmer";
	%player_info = %{starmade_player_info($player)};
	$ship_id = create_ship_object($player, $ship_type, $player_info{sector}, '0 0 0');
	sleep 1;
	%sector_info = %{starmade_sector_info($player_info{sector})};
	test_result("plugin-$plugin - create_ship_object", $sector_info{entity}{"ENTITY_SHIP_$ship_type\_$ship_id"});
	test_result("plugin-$plugin - get_object_name", get_object_name($player, $ship_id) eq "$ship_type\_$ship_id");
	test_result("plugin-$plugin - get_object_type", get_object_type($player, $ship_id) eq $ship_type);
	test_result("plugin-$plugin - get_object_id", get_object_id("$ship_type\_$ship_id") eq $ship_id);
	test_result("plugin-$plugin - get_player_from_object_id", get_player_from_object_id($ship_id) eq $player);
	test_result("plugin-$plugin - list_ship_objects", @{list_ship_objects($player)});
	
	remove_ship_object($player, $ship_id);
	%sector_info = %{starmade_sector_info($player_info{sector})};
	test_result("plugin-$plugin - remove_ship_object", !$sector_info{entity}{"ENTITY_SHIP_$ship_type\_$ship_id"});
	test_result("plugin-$plugin - list_ship_objects 2", !(@{list_ship_objects($player)}));


	## Attack tests
	%player_info = %{starmade_player_info($player)};
	player_defeat($player);
	sleep 20;
	test_result("plugin-$plugin - attack_ok after defeat", !attack_ok($player, \%player_info));

	unlink("./data/players/$player/defeat");
	player_victory($player);
	sleep 20;
	system("touch", "./data/players/$player/defeat");
	test_result("plugin-$plugin - attack_ok after vict", !attack_ok($player, \%player_info));

	unlink("./data/players/$player/victory");
	unlink("./data/players/$player/defeat");
	test_result("plugin-$plugin - attack_ok norm", attack_ok($player, \%player_info));


	test_result("$plugin - entityDestroyed", test_event("entityDestroyed", 'sdf') == 0);
	test_result("$plugin - entityOverheat", test_event("entityOverheat", 'sdf') == 0);
	test_result("$plugin - playerDeath", test_event("playerDeath", 'sdf', 'asdf') == 0);
	test_result("$plugin - sectorChange", test_event("sectorChange", 'sdf', 'sdf', '0 0 0', '1 1 1') == 0);

	if(finalize_testing()) {
		exit 0;
	}
	exit 1;
}
