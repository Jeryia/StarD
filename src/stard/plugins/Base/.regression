#!perl
use strict;
use warnings;

use lib("./lib");
use lib("../../lib/perl");
use Starmade::Message;
use Starmade::Regression;


my $stard_home = "../../";
my $stard_plugins = "$stard_home/plugins";
my $stard_enabled_plugins = "$stard_home/plugins.enabled";
starmade_setup_lib_env($stard_home);

main(@ARGV);

sub main {
	my $player = $_[0];
	my $plugin = "Base";


	my $result;
	my %player_info;
	my $last_credits;
	prep_test_category("Plugin: $plugin", 10, 1);

	# unload the Test plugin before we start
	starmade_broadcast("Setting up test environment. Please wait...");
	test_command("plugin", '', "unload", "Test");


	# Check to see if loading the test plugin via the plugin command loads the 
	# plugin.
	test_command("plugin", $player, "load", "Test");
	test_result("$plugin - plugin load:", -d "$stard_enabled_plugins/Test");
	$result = `../../bin/stard_daemons status | grep -q 'Test is running'; echo \$?`;
	test_result("$plugin - plugin unload daemon:", $result == 0);


	# Check to see if unloading the Test plugin via the plugin command 
	# actually unloads the test plugin.
	test_command("plugin", $player, "unload", "Test");
	test_result("$plugin - plugin unload:", ! -d "$stard_enabled_plugins/Test");
	$result = `../../bin/stard_daemons status | grep -q 'Test is'; echo \$?`;
	test_result("$plugin - plugin unload daemon:", $result != 0);

	
	test_result("$plugin - core", test_command("core", $player) == 0);
	test_result("$plugin - help", test_command("help", $player) == 0);
	test_result("$plugin - limits", test_command("limits", $player) == 0);
	test_result("$plugin - motd", test_command("motd", $player) == 0);
	test_result("$plugin - rules", test_command("rules", $player) == 0);
	test_result("$plugin - stard", test_command("stard", $player, 'status') == 0);

	if(finalize_testing()) {
		exit 0;
	}
	exit 1;
}

