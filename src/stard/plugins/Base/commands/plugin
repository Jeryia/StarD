#!perl
use strict;
use warnings;
use File::Copy;

use lib("../../lib/perl");
use Starmade::Base;
use Starmade::Message;
use Starmade::Player;

use Stard::Plugin;

#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
#3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# StarMadeâ„¢ is a registered trademark of Schine GmbH (All Rights Reserved)*
# The makers of stard make no claim of ownership or relationship with the owners of StarMade

## setup environment
my $base_home = '.';
my $base_spool = "$base_home/spool";
my $stard_home = "$base_home/../..";

my $plugins_dir = "$stard_home/plugins";
my $plugins_disabled_dir = "$stard_home/plugins.disabled";

my $prog = $0;

starmade_setup_lib_env($stard_home);
stard_setup_lib_env($stard_home);


main(@ARGV);
exit 0;
##############################################



sub main {
	my $player = shift(@_);
	my $command = shift(@_);
	my @plugins = @_;


	starmade_run_if_admin($player);
	if (!$command) {
		help($player);
		exit 1;
	}

	open(my $lock_fh, "<", $prog) or die "Could not open '$prog': $!\n";
	flock($lock_fh, 2) or die "Failed to lock '$prog':$!\n";
	if ($command eq 'load') {
		foreach my $plugin (@plugins) {
			load_plugin($plugin, $player);
		}
	}
	elsif ($command eq 'unload') {
		foreach my $plugin (@plugins) {
			unload_plugin($plugin, $player);
		}
	}
	elsif ($command eq 'info') {
		if (!@plugins) {
			help($player);
			exit 1;
		}
		display_plugin_info($player, $plugins[0]);
	}	
	elsif ( $command eq 'list') {
		display_active_plugins($player);
		display_disabled_plugins($player);
	}
	else {
		help($player);
		exit 1;
	}
	close($lock_fh);
};	

## load_plugin
# loads the given plugin
# INPUT1: plugin to load
# INPUT2: player to display loading information to
sub load_plugin {
	my $plugin = $_[0];
	my $player = $_[1];

	if (!$plugin) {
		help($player);
		exit 1;
	}
	my %disabled_plugins = %{get_disabled_plugins_hash()};
	if (!$disabled_plugins{$plugin}) {
		starmade_pm($player, "'$plugin' is already loaded or not available.");
		help($player);
		exit 1;
	}
	move("$plugins_disabled_dir/$plugin", "$plugins_dir/$plugin") or die "Failed to move '$plugins_disabled_dir/$plugin' to '$plugins_dir/$plugin'\n";
	starmade_broadcast("Restarting Plugin Deamons. Standby...");
	stop_stard_deamons($player);
	start_stard_deamons($player);
	starmade_broadcast("Plugin deamon restart complete!");
	starmade_broadcast("Plugin: '$plugin' has been loaded");
}

## unload_plugin
# unloads the given plugin
# INPUT1: plugin unload
# INPUT2: player to display info to
sub unload_plugin {
	my $plugin = $_[0];
	my $player = $_[1];

	if (!$plugin) {
		help($player);
		exit 1;
	}
	if ($plugin eq 'Base') {
		starmade_pm($player, "Cannot remove 'Base' plugin, this would remove the !plugin command!");
		exit 1;
	}
	my %active_plugins = %{get_active_plugins_hash()};
	if (!$active_plugins{$plugin}) {
		starmade_pm($player, "Plugin: '$plugin' is not loaded.");
		help($player);
		exit 1;
	}
	starmade_broadcast("Restarting Plugin Deamons. Standby...");
	stop_stard_deamons($player);
	move("$plugins_dir/$plugin", "$plugins_disabled_dir/$plugin") or die "Failed to move '$plugins_dir/$plugin' to '$plugins_disabled_dir/$plugin'\n";
	start_stard_deamons($player);
	starmade_broadcast("Plugin deamon restart complete!");
		
	starmade_broadcast("Plugin: '$plugin' has been unloaded");
}

## help
# disbale help information
# INPUT1: player to display info to
sub help {
	my $player= $_[0];
	my $output = '';
	
	$output .= "usage: !plugin [command] [plugin_name]\n";
	$output .= "\n";
	$output .= "Commands:\n";
	$output .= "    load <plugin> - load the given plugin\n";
	$output .= "    unload <plugin> - unload the given plugin\n";
	$output .= "    list - list what plugins are loaded and what plugins are unloaded\n";
	$output .= "    info <plugin> - display infornation on a given plugin\n";
	starmade_pm($player, $output);
	
}

## start_stard_deamons
# starts the stard daemons (this includes the plugin daemons).
sub start_stard_deamons {
	my $player = $_[0];
	my @out = `../../bin/stard_daemons start`;
	print "@out";
	starmade_pm($player, join("", @out));
}

## stop_stard_deamons
# Stops all stard daemons(including plugin daemons). 
# This is done to prevent a commend from being executed from a plugin that is 
# being disabled, and allowing any plugin deamons to write out their state 
# before they exit.
sub stop_stard_deamons {
	my $player = $_[0];
	my @out = `../../bin/stard_daemons stop`;
	print "@out";
	starmade_pm($player, join("", @out));
	
}

## display_active_plugins
# prints the active plugins for the given player
# INPUT1: player to display the info to
sub display_active_plugins {
	my $player = $_[0];

	my %plugins = %{get_active_plugins_hash()};
	my $output = "Active Plugins:\n";
	my @plugin_list = keys %plugins;
	@plugin_list = sort(@plugin_list);
	$output .= join("\n", @plugin_list);
	starmade_pm($player, $output);
}

## display_disabled_plugins
# prints the disabled plugins for the given player
# INPUT1: player to display the info to
sub display_disabled_plugins {
	my $player = $_[0];

	my %plugins = %{get_disabled_plugins_hash()};
	my $output = "Disabled Plugins:\n";
	my @plugin_list = keys %plugins;
	@plugin_list = sort(@plugin_list);
	$output .= join("\n", @plugin_list);
	starmade_pm($player, $output);
}

## get_disabled_plugins_hash
# puts disabled the plugins into a hash table for easy lookup
# OUTPUT: hash table of plugins
sub get_disabled_plugins_hash {
	return get_dir_contents_hash($plugins_disabled_dir);
}

## get_active_plugins_hash
# puts the active plugins into a hash table for easy lookup
# OUTPUT: hash table of plugins
sub get_active_plugins_hash {
	my @plugins = @{get_active_plugin_list()};
	my %plugin_hash = ();
	foreach my $plugin (@plugins) {
		$plugin_hash{$plugin} = 1;
	}
	return \%plugin_hash;
}

## get_dir_contents_hash
# gets the contents of a directory and stores they in a hash for easy lookup
# INPUT1: directory path
# OUTPUT: hash of contents of directory
sub get_dir_contents_hash {
	my $dir = $_[0];
	my %dir_contents = ();

	opendir(my $dh, $dir) or die "could not open '$dir': $!\n";
	while (readdir $dh) {
		my $item = $_;
		if ($item ne '.' && $item ne '..') {
			$dir_contents{$item} = 1;
		}
	}
	return \%dir_contents;
}

## display_plugin_info
# Prints out the 'info.txt' file from the selected plugin.
# This is intended to give the admin an idea of what a plugin does before loading it.
# INPUT1: player to send to display info to
# INPUT2: plugin name
sub display_plugin_info {
	my $player = $_[0];
	my $plugin = $_[1];
	my %active_plugins = %{get_active_plugins_hash()};
	my %disabled_plugins = %{get_disabled_plugins_hash()};
	if ($active_plugins{$plugin}) {
		my $fh;
		if (!open($fh, "<", "$plugins_dir/$plugin/info.txt")) {
			 starmade_cmd($player, "No information available for plugin '$plugin'");
			exit 1;
		}
		my @output = <$fh>;
		starmade_pm($player, "$plugin info:\n" . join("", @output));
	}
	elsif ($disabled_plugins{$plugin}) {
		my $fh;
		if (!open($fh, "<", "$plugins_disabled_dir/$plugin/info.txt")) {
			 starmade_cmd($player, "No information available for plugin '$plugin'");
			exit 1;
		}
		my @output = <$fh>;
		starmade_pm($player, "$plugin info:\n" . join("", @output));
	}
	else {
		starmade_pm($player, "'$plugin' does not appear to exist. Could not get any info on it");
		help($player);
	}
}

