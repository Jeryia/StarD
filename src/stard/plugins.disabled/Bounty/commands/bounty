#!perl
use strict;
use warnings;

use lib("./lib");
use lib("../../lib");
use stard_lib;
use stard_core;
use bounty_lib;

#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
#3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

## setup environment
my $stard_home = "./../..";

stard_setup_run_env($stard_home);


main(@ARGV);
exit 0;
#########################################################




sub main {
	my $requester = $_[0];
	my $player = $_[1];
	my $amount = $_[2];
	my $in_bounty;
	my $player_credits;
	if (!$player) {
		usage($requester);
		exit 0;
	}

	if (!$amount || $amount =~/\D+/) {
		stard_pm($requester, "You must provide the number to deposit!");
		usage($requester);
		exit 1;
	};

	if (!%{stard_player_info($player)}) {
		print "test1\n";
		stard_pm($requester, "$player is not logged in or does not exist.\n You can only place bounties on players that are online!");
		exit 0;
	}


	## lock to perform transaction 
	# and gather all data
	my $lock_fh = bounty_lock_account($player);
	$in_bounty = bounty_get_balance($player);
	$player_credits = get_player_credits($requester);
	if (!$lock_fh) {
		stard_pm($requester, "FAILED COMMAND: failed to get lock on $requester\'s bounty account: $!\n");
		exit 1;
	};


	## validate player gas the credits they think they do
	if ($player_credits < $amount) {
		stard_pm($requester, "You do not have that many credits to offer!");
		exit 1;
	};



	## perform transaction
	if (!stard_give_credits($player, "-$amount")) {
		stard_pm($player, "Deposit failed...");
		exit 0;
	};

	if(!bounty_add_amount($player, $amount)) {
		stard_pm($player, "Deposit failed...");
		stard_give_credits($player, "$amount");
		exit 0;
	};
	bounty_unlock_account($lock_fh);
	stard_pm($requester, "$requester, $amount has been put up for the bounty on $player");
	stard_broadcast("A bounty has been placed on $player\'s head!");
	stard_broadcast("type !bounty of rmore information");
};

## usage
# Print help information
# INPUT1: player to send help message to
sub usage {
	my $player = $_[0];
	my %tmp = %{stard_player_list()};
	my @players = keys(%tmp);

	my $output = "Available Bounties:\n";
	foreach my $player (@players) {
		my $bounty = bounty_get_balance($player);
		if ($bounty) {
			$output .= "$player: $bounty\n";
		}
	}
	$output .= "Kill the player to get the reward. The reward will be distributed to all nearby faction members.";

	stard_pm($player, $output);
	stard_pm($player, "Usage: !bounty <player> <amount>");
	stard_pm($player, "Description: Put up credits toward a player's bounty.");
}
