#!perl
use strict;
use warnings;

use lib("./lib");
use lib("../../lib");
use stard_lib;
use stard_core;

$| = 1;
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
#3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# StarMadeâ„¢ is a registered trademark of Schine GmbH (All Rights Reserved)*
# The makers of stard make no claim of ownership or relationship with the owners of StarMade

## regression
# This script includes the primary regression testing code for stard.
# This script is called to test the stard standard library's functions for 
# defects.

## setup environment
my $debug_home = '.';
my $stard_home = "$debug_home/../..";
require "$stard_home/lib/stard_lib.pm";
stard_setup_run_env($stard_home);
stard_stdlib_set_debug(1);


my $player = $ARGV[0];


main(@ARGV);
exit(0);

#################################################

sub main {
	my $player = $_[0];
	my $test = $_[1];

	stard_broadcast("Regression requested...");
	stard_cmd("/god_mode $player true");



	if (!$test || $test eq 'full') {
		stard_broadcast("Running full suite");
		general_reg($player);
		player_reg($player);
		faction_reg($player);
		sector_reg($player);
	}
	elsif ($test eq "general") {
		general_reg($player);
	}
	elsif ($test eq "player") {
		player_reg($player);
	}
	elsif ($test eq "faction") {
		faction_reg($player);
	}
	elsif ($test eq "sector") {
		sector_reg($player);
	}
	else {
		stard_pm($player, "Error, requested regression suite not found: $test");
	};
	stard_cmd("/god_mode $player false");
	stard_broadcast("All tests passed!");
}


## general_reg
# perform basic functionality regression tests for stard
# INPUT1: name of the player who requested the testing.
sub general_reg {
	my $player = $_[0];
	my $test;
	my $string;
	my $cmd_result;
	my $input;
	my $echo;


	if (!stard_broadcast("###Running General tests###")) {
		print "Failed to broadcast message :(\n";
		exit 1;
	}

	$test = "starmade_escape_chars - escape test";
	$input = "test\"'";
	$cmd_result = starmade_escape_chars($input);
	print "echo -n $cmd_result\n";
	$echo = `echo -n $cmd_result`;
	test_result($test, $echo eq "test\"");

	$test = "stard_cmd - basic command";
	$input = "/status";
	$cmd_result = stard_cmd($input);
	test_result($test, $cmd_result =~/SERVER, Players/, "'$input' outputs: '$cmd_result'");
	
	$test = "stard_pm - general";
	$input = "pm test";
	test_result($test, stard_pm($player, $input));

	$test = "stard_pm - missing_player";
	$input = "pm test";
	test_result($test, !stard_pm('dWtaUw', $input));
	
	my @admins = @{stard_admin_list()};
	test_result($test, @admins, "no admins appear in admins.txt");

	$test = "stard_admin_list - realAdmin";
	test_result($test, stard_is_admin($admins[0]), "admin_list:" . join(",", @admins));

	$test = "stard_admin_list - fakeAdmin";
	test_result($test, !stard_is_admin('dWtaUw'));
	test_result("stard_location_add", stard_location_add("1 1 1", "1 1 1") eq "2 2 2", stard_location_add("1 1 1", "1 1 1") . "!= '2 2 2'");
	test_result("stard_loc_distance:1", stard_loc_distance("0 0 0", "0 0 1") == 1);
	test_result("stard_loc_distance:2", stard_loc_distance("0 0 0", "0 1 0") == 1);
	test_result("stard_loc_distance:3", stard_loc_distance("0 0 0", "1 0 0") == 1);
	test_result("stard_loc_distance:null", stard_loc_distance("0 0 0", "0 0 0") == 0);
	test_result("stard_loc_distance:dec1", stard_loc_distance("0 0 0", "0 0 0.1") == 0.1);
	test_result("stard_loc_distance:dec2", stard_loc_distance("0 0 0", "0 0.1 0") == 0.1);
	test_result("stard_loc_distance:dec3", stard_loc_distance("0 0 0", "0.1 0 0") == 0.1);
	stard_broadcast("\n\n");
	print "\n\n";
	
}

## player_reg
# Perform player oriented functionality regression tests for stard
# INPUT1: name of the player who requested the testing.
sub player_reg {
	my $player = $_[0];
	if (!stard_broadcast("###Running Player tests###")) {
		print "failed to broadcast message :(\n";
		exit 1;
	}

	test_result("god_mode active", stard_god_mode($player, 1));
	test_result("god_mode inactive", stard_god_mode($player, 0));
	test_result("god_mode invalid", !stard_god_mode('msbr', 1));
	
	test_result("invisibility_mode active", stard_invisibility_mode($player, 1));
	test_result("invisibility_mode inactive", stard_invisibility_mode($player, 0));
	test_result("invisibility_mode invalid", !stard_invisibility_mode('msbr', 1));

	my %player_list = %{stard_player_list()};
	my %player_info1 = %{$player_list{$player}};
	test_result(
		"player_list",
		keys %player_info1
	);

	stard_broadcast("$player\'s data:");
	for my $field (keys %player_info1) {
		stard_broadcast("$field: $player_info1{$field}");
	};

	my %player_info2 = %{stard_player_info($player)};
	test_result("stard_player_info", keys %player_info2);
	my $consistancy = 1;
	for my $field (keys %player_info1) {
		if ($player_info1{$field} ne $player_info1{$field}) {
			stard_broadcast("player_list and player_info data don't match!");
			stard_broadcast("$field: $player_info1{$field} != $player_info2{$field}");
			$consistancy = 0;
		}
	};
	test_result("stard_player_info,stard_player_list - consistancy", $consistancy);
	stard_broadcast("\n\n");


	test_result("stard_give_credits", stard_give_credits($player, 100));
	test_result("stard_give_credits: unknown player", !stard_give_credits('adfaddreh', 100));
	test_result("stard_give_item", stard_give_item($player, "Thruster", 1));
	test_result("stard_give_item: unknown item", !stard_give_item($player, "Thrusterz", 1));
	test_result("stard_give_item: unknown player", !stard_give_item('adfaddreh', "Thruster", 1));
	test_result("stard_give_all_items", stard_give_all_items($player, -1));
	test_result("stard_give_all_items: unknown player", !stard_give_credits('adfaddreh', -1));
	test_result("stard_set_spawn_player", stard_set_spawn_player($player));
	test_result("stard_set_spawn_player:unknown player", !stard_set_spawn_player('adfaddreh'));
	print "\n\n";	
}

## faction_reg
# Perform faction oriented functionality regression tests for stard
# INPUT1: name of the player who requested the testing.
sub faction_reg {
	my $player = $_[0];
	my %factions_bid;
	my %factions_bname;
	my %player_info;
	my $faction = "Test Faction";
	if (!stard_broadcast("###Running Factions tests###")) {
		print "failed to broadcast message :(\n";
		exit 1;
	}

	
	%factions_bname = %{stard_faction_list_bname()};
	while ($factions_bname{$faction}) {
		stard_faction_delete($factions_bname{$faction}{id});
		%factions_bname = %{stard_faction_list_bname()};
	}


	%factions_bid = %{stard_faction_list_bid()};
	test_result("stard_faction_list_bid", defined $factions_bid{'-1'}, "faction_ids:" . join(",", keys %factions_bid));
	test_result("stard_faction_list_bid - name", defined $factions_bid{'-1'}{name});
	test_result("stard_faction_list_bid - desc", defined $factions_bid{'-1'}{desc});
	test_result("stard_faction_list_bid - size", defined $factions_bid{'-1'}{size});
	test_result("stard_faction_list_bid - points", defined $factions_bid{'-1'}{points});


	%factions_bname = %{stard_faction_list_bname()};
	test_result("stard_faction_list_bname", defined $factions_bname{Pirates});
	test_result("stard_faction_list_bname - id", defined $factions_bname{Pirates}{id});
	test_result("stard_faction_list_bname - desc", defined $factions_bname{Pirates}{desc});
	test_result("stard_faction_list_bname - size", defined $factions_bname{Pirates}{size});
	test_result("stard_faction_list_bname - points", defined $factions_bname{Pirates}{points});

	test_result("stard_faction_list_bname - consistancy", $factions_bname{Pirates}{id} == -1);
	test_result("stard_faction_list_bid - consistancy", $factions_bid{-1}{name} eq "Pirates");

	test_result("stard_faction_create", stard_faction_create($faction, ''));
	%factions_bname = %{stard_faction_list_bname()};
	test_result("stard_faction_create - validate", defined $factions_bname{$faction});

	my $faction_id = $factions_bname{$faction}{id};
	test_result("stard_faction_add_member", stard_faction_add_member($player, $faction_id));
	%player_info = %{stard_player_info($player)};
	test_result("stard_faction_add_member - validate", $player_info{faction} == $faction_id);

	my %members = %{stard_faction_list_members($faction_id)};
	test_result("stard_faction_list_members", defined $members{$player});

	test_result("stard_faction_del_member", stard_faction_del_member($player, $faction_id));
	%player_info = %{stard_player_info($player)};
	test_result("stard_faction_del_member - validate", ! defined $player_info{faction});

	test_result("stard_faction_delete", stard_faction_delete($faction_id));
	%factions_bname = %{stard_faction_list_bname()};
	test_result("stard_faction_delete - validate", !(defined $factions_bname{$faction}));
	stard_broadcast("\n\n");
	print "\n\n";
}

## sector_reg
# Perform sector oriented functionality regression tests for stard
# INPUT1: name of the player who requested the testing.
sub sector_reg {
	my $player = $_[0];	
	my %player_info;

	my $spawn = "2 2 2";
	my $sector1 = "5 5 5";

	stard_change_sector_for($player, $spawn);
	%player_info = %{stard_player_info($player)};
	test_result("stard_change_sector_for - spawn", $player_info{sector} eq $spawn);

	sleep 5;
	test_result("stard_change_sector", stard_change_sector_for($player, $sector1));
	%player_info = %{stard_player_info($player)};
	test_result("stard_change_sector_for - validate", $player_info{sector} eq $sector1);

	my $ship_name = "spawn_test";
	my $blueprint = "Isanth Type-Zero Mc";
	test_result("stard_spawn_entity", stard_spawn_entity($blueprint, $ship_name, $sector1, -1, 'false' ));
	my %search = %{stard_search($ship_name)};
	my $validate = keys %search;
	test_result("stard_search/stard_spawn_entity", $validate >= 1);
	%search = %{stard_sector_info($sector1)};
	$validate = join(" ", keys %{$search{entity}});
	test_result("stard_sector_info/stard_spawn_entity", $search{entity}{"ENTITY_SHIP_$ship_name"}, $validate);
	
	test_result("stard_despawn_all", stard_despawn_all($ship_name, 'all', 'true'));
	%search = %{stard_search($ship_name)};
	$validate = keys %search;
	test_result("stard_despawn_all - validate", $validate <= 0);

	$ship_name = "spawn_test2";
	stard_spawn_entity($blueprint, $ship_name, $sector1, -1, 'false');


	test_result("stard_despawn_sector", stard_despawn_sector($ship_name, 'all', 'true', $sector1));
	%search = %{stard_search($ship_name)};
	$validate = keys %search;
	test_result("stard_despawn_all - validate", $validate <= 0);

	
	$ship_name = "spawn_test3";
	$blueprint = "goblygook";
	test_result("stard_spawn_entity - invalid blueprint", !stard_spawn_entity($blueprint, $ship_name, $sector1, -1, 'false'));


	test_result("stard_sector_chmod - set protected", stard_sector_chmod($sector1, "add", "protected"));
	my %sector_info = %{stard_sector_info($sector1)};
	test_result("stard_sector_chmod/stard_sector_info validation", $sector_info{general}{info}{protected});
	
	sleep 5;	

	test_result("stard_sector_chmod - unset protected", stard_sector_chmod($sector1, "remove", "protected"));
	%sector_info = %{stard_sector_info($sector1)};
	test_result("stard_sector_chmod/stard_sector_info validation", !$sector_info{general}{info}{protected});

	stard_broadcast("\n\n");
	print "\n\n";

};

## test_result
# Process the result of the test and report on it. Also wait .25 seconds to not 
# slam the starmade server.
# INPUT1: test being run
# INPUT2: (boolean) 0 if failure, nonzero if success
# INPUT3: Optional message to include with failure results
sub test_result {
	my $test = $_[0];
	my $result = $_[1];
	my $message = $_[2];
	select(undef, undef, undef, 0.25);
	if ($result) {
		stard_broadcast("$test - PASS");
		return 1;
	}
	else {
		stard_broadcast("$test - FAIL");
		if ($message) {
			stard_broadcast($message);
		};
		exit 1;
	};
	return 0;
};
